name:                lol-cpp
-- The package version.  See the Haskell package versioning policy (PVP)
-- for standards guiding when and how versions should be incremented.
-- http://www.haskell.org/haskellwiki/Package_versioning_policy
-- PVP summary:      +-+------- breaking API changes
--                   | | +----- non-breaking API additions
--                   | | | +--- code changes with no API change
version:             0.1.0.0
synopsis:            A fast C++ backend for <https://hackage.haskell.org/package/lol lol>.
homepage:            https://github.com/cpeikert/Lol
Bug-Reports:         https://github.com/cpeikert/Lol/issues
license:             GPL-3
license-file:        LICENSE
author:              Eric Crockett <ecrockett0@gmail.com>, Chris Peikert <cpeikert@alum.mit.edu>
maintainer:          Eric Crockett <ecrockett0@gmail.com>
copyright:           Eric Crockett, Chris Peikert
category:            Crypto
stability:           experimental
build-type:          Simple
extra-source-files:  README, CHANGES.md,
                     Crypto/Lol/Cyclotomic/Tensor/CPP/*.h,
                     Crypto/Lol/Cyclotomic/Tensor/CPP/*.cpp
cabal-version:       >= 1.10
description:
    Λ ⚬ λ (Lol) is a general-purpose library for ring-based lattice cryptography.
    This package provides a C++ implementation of Lol's Tensor interface.
source-repository head
  type: git
  location: https://github.com/cpeikert/Lol

-- For information on compiling C with cabal: http://blog.ezyang.com/2010/06/setting-up-cabal-the-ffi-and-c2hs/

Flag llvm
  Description:  Compile via LLVM. This produces much better object code,
                but you need to have the LLVM compiler installed.
  -- If you enable this and get errors like "Error: can't resolve
  -- `.rodata' {.rodata section}" then GHC doesn't like your version
  -- of LLVM!
  Default:      False

Flag opt
  Description: Turn on library optimizations
  Default:     True

Flag with-apps
  Description: When this flag is enabled, lol-apps tests and benchmarks are buildable.
  Default:     True

-- EAC: This flag is due to
-- https://github.com/commercialhaskell/stack/issues/1406, which
-- prevents us from telling stack to not build executables.
Flag with-execs
  Description: When this flag and `with-apps` are both enabled, the lol-apps executables are buildable.
  Default:     False

library
  default-language:   Haskell2010
  cc-options: -std=c++11 -O3
  Include-dirs: Crypto/Lol/Cyclotomic/Tensor/CPP
  -- Due to #12152, the file containing the definition of `Zq::q` must
  -- be linked first, otherwise dynamic linking (`cabal repl` or
  -- `stack ghci`) results in the error: "Loading temp shared object
  -- failed: /tmp/ghc54651_0/libghc_1.so: undefined symbol _ZN2Zq1qE"
  -- For `cabal repl`, we can simply reorder the list so that the file
  -- that should be linked first comes first in the list. However
  -- `stack ghci` always links alphabetically, so we really just have
  -- to define `Zq::q` in the first file alphabetically.
  C-sources: Crypto/Lol/Cyclotomic/Tensor/CPP/common.cpp,
             Crypto/Lol/Cyclotomic/Tensor/CPP/crt.cpp,
             Crypto/Lol/Cyclotomic/Tensor/CPP/g.cpp,
             Crypto/Lol/Cyclotomic/Tensor/CPP/l.cpp,
             Crypto/Lol/Cyclotomic/Tensor/CPP/mul.cpp,
             Crypto/Lol/Cyclotomic/Tensor/CPP/norm.cpp,
             Crypto/Lol/Cyclotomic/Tensor/CPP/random.cpp,
             Crypto/Lol/Cyclotomic/Tensor/CPP/rrq.cpp
             Crypto/Lol/Cyclotomic/Tensor/CPP/zq.cpp

  if flag(llvm)
    ghc-options: -fllvm -optlo-O3 -pgmlo opt

  exposed-modules:
    Crypto.Lol.Cyclotomic.Tensor.CPP

  other-modules:
    Crypto.Lol.Cyclotomic.Tensor.CPP.Backend
    Crypto.Lol.Cyclotomic.Tensor.CPP.Extension
    Crypto.Lol.Cyclotomic.Tensor.CPP.Instances

  build-depends:
    base,
    constraints,
    deepseq,
    lol >= 0.7.0.0 && < 0.8,
    MonadRandom,
    mtl,
    numeric-prelude,
    reflection,
    vector

  other-extensions: TemplateHaskell

Benchmark bench-lol-cpp
  type:             exitcode-stdio-1.0
  default-language: Haskell2010
  main-is:          BenchLolCPPMain.hs
  ghc-options:      -main-is BenchLolCPPMain
  if flag(llvm)
    ghc-options: -fllvm -optlo-O3 -pgmlo opt
  hs-source-dirs:   benchmarks

  build-depends:
    base,
    DRBG,
    lol >= 0.7.0.0 && < 0.8,
    lol-cpp

Benchmark bench-lol-apps-cpp
  type:             exitcode-stdio-1.0
  default-language: Haskell2010
  main-is:          BenchAppsCPPMain.hs
  ghc-options:      -main-is BenchAppsCPPMain
  if flag(llvm)
    ghc-options: -fllvm -optlo-O3 -pgmlo opt
  if !flag(with-apps)
    buildable: False
  hs-source-dirs:   benchmarks

  build-depends:
    base,
    DRBG,
    lol >= 0.7.0.0 && < 0.8,
    lol-apps >= 0.2.1 && < 0.3,
    lol-cpp,
    MonadRandom

test-suite test-lol-cpp
  type:             exitcode-stdio-1.0
  default-language: Haskell2010
  main-is:          TestLolCPPMain.hs
  ghc-options: -main-is TestLolCPPMain
  if flag(llvm)
    ghc-options: -fllvm -optlo-O3 -pgmlo opt
  hs-source-dirs:   tests

  build-depends:
    base,
    lol >= 0.7.0.0 && < 0.8,
    lol-cpp,
    test-framework

test-suite test-lol-apps-cpp
  type:             exitcode-stdio-1.0
  default-language: Haskell2010
  main-is:          TestAppsCPPMain.hs
  ghc-options: -main-is TestAppsCPPMain
  if flag(llvm)
    ghc-options: -fllvm -optlo-O3 -pgmlo opt
  if !flag(with-apps)
    buildable: False
  hs-source-dirs:   tests

  build-depends:
    base,
    lol >= 0.7.0.0 && < 0.8,
    lol-apps >= 0.2.1 && < 0.3,
    lol-cpp,
    test-framework

executable homomprf-cpp
  hs-source-dirs: examples
  default-language: Haskell2010
  main-is: HomomPRFCPPMain.hs
  ghc-options: -main-is HomomPRFCPPMain
  if flag(llvm)
    ghc-options: -fllvm -optlo-O3 -pgmlo opt
  if !flag(with-apps) || !flag(with-execs)
    buildable: False
  build-depends:
    base,
    lol-apps >= 0.2.1 && < 0.3,
    lol-cpp

executable khprf-cpp
  hs-source-dirs: examples
  default-language: Haskell2010
  main-is: KHPRFCPPMain.hs
  ghc-options: -main-is KHPRFCPPMain
  if flag(llvm)
    ghc-options: -fllvm -optlo-O3 -pgmlo opt
  if !flag(with-apps) || !flag(with-execs)
    buildable: False
  build-depends:
    base,
    lol-apps >= 0.2.1 && < 0.3,
    lol-cpp

executable symmshe-cpp
  hs-source-dirs:   examples
  default-language: Haskell2010
  main-is:          SHECPPMain.hs
  ghc-options: -main-is SHECPPMain
  if flag(llvm)
    ghc-options: -fllvm -optlo-O3 -pgmlo opt
  if !flag(with-apps) || !flag(with-execs)
    buildable: False
  build-depends:
    base,
    lol-apps >= 0.2.1 && < 0.3,
    lol-cpp
